<?php
// $Id$
/**
 * @file
 * Adds a Facebook feed processor to the Feeds module.
 */

feeds_facebook_require('feeds_facebook.install'); // Get cache table constant.

feeds_facebook_require('FbGraph.php', 'fbGraph', TRUE);
fb_graph_require('LogBase', 'log', TRUE); // Need some log type constants.

/*******************************************************************************
 * Drupal hooks
 */

/**
 * Implementation of hook_theme()
 */
function feeds_facebook_theme() {
  $theme_path = drupal_get_path('module', 'feeds_facebook') . '/theme';

  return array(

    // Feeds Facebook form rendering.
    'facebook_search_form' => array(
      'arguments' => array('form' => NULL),
      'file' => "$theme_path/feeds_facebook_forms.inc",
    ),
    'facebook_object_selector_form' => array(
      'arguments' => array('form' => NULL),
      'file' => "$theme_path/feeds_facebook_forms.inc",
    ),
    'facebook_object_canvas_form' => array(
      'arguments' => array('form' => NULL),
      'file' => "$theme_path/feeds_facebook_forms.inc",
    ),
    'facebook_feed_selector_form' => array(
      'arguments' => array('form' => NULL),
      'file' => "$theme_path/feeds_facebook_forms.inc",
    ),
    'facebook_object_display_form' => array(
      'arguments' => array('form' => NULL),
      'file' => "$theme_path/feeds_facebook_forms.inc",
    ),

    // Facebook object rendering.
    'facebook_object' => array(
      'arguments' => array('fb_object' => NULL),
      'path' => $theme_path,
      'template' => 'facebook_object',
    ),
    'facebook_user' => array(
      'arguments' => array('fb_user' => NULL),
      'path' => $theme_path,
      'template' => 'facebook_user',
    ),
    'facebook_group' => array(
      'arguments' => array('fb_group' => NULL),
      'path' => $theme_path,
      'template' => 'facebook_group',
    ),
    'facebook_event' => array(
      'arguments' => array('fb_event' => NULL),
      'path' => $theme_path,
      'template' => 'facebook_event',
    ),
    'facebook_page' => array(
      'arguments' => array('fb_page' => NULL),
      'path' => $theme_path,
      'template' => 'facebook_page',
    ),
  );
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_perm().
 */
function feeds_facebook_perm() {
  return array('administer feeds facebook');
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_menu().
 */
function feeds_facebook_menu() {
	global $_fb_app; // Set by Drupal for Facebook - fb_app.module.
	
  $items = array();

  if (is_null($_fb_app)) {
	  $items['admin/settings/feeds_facebook'] = array(
    	'title' => 'Facebook feeds configuration',
    	'description' => 'Set Facebook feeds authorization credentials.',
    	'page callback' => 'drupal_get_form',
    	'page arguments' => array('feeds_facebook_admin_settings'),
    	'access arguments' => array('administer feeds facebook'),
    	'file' => 'feeds_facebook.admin.inc',
    );
  }
	$items['feeds_fb/search/ahah/%'] = array(
    'title' => 'Facebook search result selection form',
    'page callback' => 'feeds_facebook_ahah_callback',
    'page arguments' => array(3), // Target form element.
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
	return $items;
}

/*******************************************************************************
 * Feeds hooks
 */

/**
 * Implementation of hook_feeds_plugins().
 */
function feeds_facebook_feeds_plugins() {

  $plugin_dir = drupal_get_path('module', 'feeds_facebook') . '/plugins';

  // Fetchers

  $info['FeedsFacebookGraphFetcher'] = array(
    'name' => 'Facebook Graph API Fetcher',
    'description' => 'Download Facebook information for users, groups, pages, events, and posts.',
    'handler' => array(
      'parent' => 'FeedsFetcher', // This is the key name, not the class name.
      'class' => 'FeedsFacebookGraphFetcher',
      'file' => 'FeedsFacebookGraphFetcher.inc',
      'path' => "$plugin_dir/fetchers",
    ),
  );

  // Parsers

  $info['FeedsFacebookUserSubmissionParser'] = array(
    'name' => 'Facebook user submission parser',
    'description' => 'Parse Facebook user submissions from a Facebook feed.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsFacebookUserSubmissionParser',
      'file' => 'FeedsFacebookUserSubmissionParser.inc',
      'path' => "$plugin_dir/parsers",
    ),
  );
  $info['FeedsFacebookLinkedResourceParser'] = array(
    'name' => 'Facebook linked resource parser',
    'description' => 'Parse Facebook linked resources from a Facebook feed.',
    'handler' => array(
      'parent' => 'FeedsFacebookUserSubmissionParser',
      'class' => 'FeedsFacebookLinkedResourceParser',
      'file' => 'FeedsFacebookLinkedResourceParser.inc',
      'path' => "$plugin_dir/parsers",
    ),
  );
  $info['FeedsFacebookImageResourceParser'] = array(
    'name' => 'Facebook image resource parser',
    'description' => 'Parse Facebook image resources from a Facebook feed.',
    'handler' => array(
      'parent' => 'FeedsFacebookLinkedResourceParser',
      'class' => 'FeedsFacebookImageResourceParser',
      'file' => 'FeedsFacebookImageResourceParser.inc',
      'path' => "$plugin_dir/parsers",
    ),
  );
  $info['FeedsFacebookStatusParser'] = array(
    'name' => 'Facebook Status message parser',
    'description' => 'Parse Facebook status messages from a Facebook feed.',
    'handler' => array(
      'parent' => 'FeedsFacebookUserSubmissionParser',
      'class' => 'FeedsFacebookStatusParser',
      'file' => 'FeedsFacebookStatusParser.inc',
      'path' => "$plugin_dir/parsers",
    ),
  );
  $info['FeedsFacebookLinkParser'] = array(
    'name' => 'Facebook link parser',
    'description' => 'Parse Facebook links from a Facebook feed.',
    'handler' => array(
      'parent' => 'FeedsFacebookImageResourceParser',
      'class' => 'FeedsFacebookLinkParser',
      'file' => 'FeedsFacebookLinkParser.inc',
      'path' => "$plugin_dir/parsers",
    ),
  );
  $info['FeedsFacebookPhotoParser'] = array(
    'name' => 'Facebook photo parser',
    'description' => 'Parse Facebook photos from a Facebook feed.',
    'handler' => array(
      'parent' => 'FeedsFacebookImageResourceParser',
      'class' => 'FeedsFacebookPhotoParser',
      'file' => 'FeedsFacebookPhotoParser.inc',
      'path' => "$plugin_dir/parsers",
    ),
  );
  return $info;
}

/*******************************************************************************
 * Menu callbacks
 */

/**
 * Handle submission of Facebook feed search form.
 */
function feeds_facebook_ahah_callback($field_lineage) {
	$log = feeds_facebook_get_log();
	$log->debug('feeds_facebook_ahah_callback()', $field_lineage, $_POST);

	if (preg_match('/_node_form$/', $_POST['form_id'])) {
		// The form is generated in an include file which we need to include manually.
    include_once 'modules/node/node.pages.inc';
	}
	// Process form and return our new element.
  $form   = _feeds_facebook_rebuild_ahah_form($_POST);
  $output = _feeds_facebook_render_ahah_element($form, explode(',', $field_lineage));
  $log->debug('AHAH output:', $output);

  $javascript = drupal_add_js(NULL, NULL, 'header');
  $settings   = call_user_func_array('array_merge_recursive', $javascript['setting']);

  // Final rendering callback.
  drupal_json(array(
    'status' => TRUE,
    'data' => $output,
    'settings' => array('ahah' => $settings['ahah']),
  ));
}

/*******************************************************************************
 * Form handlers
 */

/**
 * AHAH no javascript submit handler.
 */
function feeds_facebook_nojs_submit($form, &$form_state) {
	$log = feeds_facebook_get_log();
	$log->debug('feeds_facebook_nojs_submit()', /*$form,*/ $form_state);

	$values = &$form_state['values'];

	if (preg_match('/_node_form$/', $values['form_id'])) {
    // Set the form to rebuild and run submit handlers.
    // TODO: Figure out if and why I need this.  poll.module had it.
    $log->debug('Rebuilding node...');
    node_form_submit_build_node($form, $form_state);
	}
}

/*******************************************************************************
 * Utilities
 */

/**
 * Return a singleton FbGraph instance.
 */
function feeds_facebook_get_graph() {
  $log = feeds_facebook_get_log();
  $log->debug('feeds_facebook_get_graph()');
  
  static $graph;
  $log->debug('Static graph:', $graph);

  if (is_null($graph)) {
    global $_fb, $_fb_app; // Set by Drupal for Facebook - fb_app.module.

    $graph = new FbGraph();

    if (!is_null($_fb_app)) {
      $log->debug('Facebook app:', $_fb_app);
      
      //$graph->setFacebook($_fb); // Authenticated
      $graph->init($_fb_app->apikey, $_fb_app->secret); // Non authenticated
    }
    else {
      feeds_facebook_require('facebook.php', 'facebook-php-sdk/src', TRUE);
      $graph->init(variable_get('facebook_api_key', ''), variable_get('facebook_app_secret', ''));  
    }
    $graph->setCache(feeds_facebook_get_cache());
    $graph->setLoggers(feeds_facebook_get_log());

    $graph->setDepth(1);
  }
  $log->debug('Facebook graph:', $graph);
  return $graph;
}

//------------------------------------------------------------------------------

/**
 * Return a singleton DrupalCache instance.
 */
function feeds_facebook_get_cache() {
	static $cache;

	if (is_null($cache)) {
	  feeds_facebook_require('DrupalCache.inc', 'includes');
		$cache = new DrupalCache(FEEDS_FACEBOOK_CACHE_TABLE);
	}
	return $cache;
}

//------------------------------------------------------------------------------

/**
 * Return a singleton DrupalDumper instance.
 */
function feeds_facebook_get_log() {
  static $log;

  if (is_null($log)) {
    fb_graph_require('FileDumper', 'log', TRUE);
    $log = new FileDumper('feeds_facebook', array(LogBase::LOG_TYPE_NONE));
    $log->setLogPath('../logs');
  }
  return $log;
}

//------------------------------------------------------------------------------

/**
 * Includes a module or library file.
 */
function feeds_facebook_require($file, $package = '', $is_library = FALSE) {
  $package = ($package ? "$package/" : '');

  if (!$is_library) {
    // Include module files.
    require_once(dirname(__FILE__) . "/$package$file");
  }
  else {
    // Support external libraries.
    $base_path    = $GLOBALS['base_path'];
    $library_path = (strlen($base_path) > 1 ? $base_path : '') . 'sites/all/libraries';

    require_once("$library_path/$package$file");
  }
}

/*******************************************************************************
 * Auxillary functions. (for internal use)
 */

/**
 * Prepare a form for AHAH form element injection.
 */
function _feeds_facebook_rebuild_ahah_form($post) {
  $log = feeds_facebook_get_log();
  $log->debug('_feeds_facebook_prepare_ahah_form()', $post);

  // Set up a brand new form_state.
  // This will be changed in drupal_process_form().
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $log->debug('Initial form state:', $form_state);

  $form_build_id = $post['form_build_id'];
  $log->debug('Form build id:', $form_build_id);

  // Get the old form.
  $form = form_get_cache($form_build_id, $form_state);
  $log->debug('Cached form:', $form);

  // Change some form properties before processing.
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $log->debug("Form arguments ($form_id):", $args);

  $form_state['post'] = $form['#post'] = $post;
  $form_state['submitted'] = TRUE;

  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Perform validation and submit handling.
  drupal_process_form($form_id, $form, $form_state);
  $log->debug("Processed form ($form_id):", $form, $form_state);

  // Rebuild the form with our changes.
  $log->debug("Rebuilding form:", $form_state, $args);
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $log->debug("Rebuilt form ($form_id):", $form);
  return $form;
}

//------------------------------------------------------------------------------

/**
 * Render a specific form element after a form has been rebuilt.
 */
function _feeds_facebook_render_ahah_element($form, $element_lineage) {
  $log = feeds_facebook_get_log();
  $log->debug('_feeds_facebook_retrieve_ahah_form()', $form, $element_lineage);

  $form_element = $form;
  // Work our way down into correct element.
  foreach ($element_lineage as $element) {
    $form_element = $form_element[$element];
    $log->debug("Form element ($element) :", $form_element);
  }
  // Render form element output.
  unset($form_element['#prefix'], $form_element['#suffix']); // Prevent duplicate wrappers.
  $output = theme('status_messages') . drupal_render($form_element);
  $log->debug("Form element output:", $output);
  return $output;
}

